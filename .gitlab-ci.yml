# Copyright Centre for Vision Speech and Signal Processing & Institute of Sound and Vibration Research - All rights reserved

#
# Gitlab CI Script:
#
stages:
  - config_and_generate
  - build
  - test
  - package

#
# Global variable declarations
# These variables can be set/unset based on the currently active runners. For example, If there is no runner for python 3.6, the job will be pending and causing the whole stage to be pending and eventually fail. Setting RUNNER_MACOS_PYTHON_36="OFF" allows to say that at the moment there are no runners for macosx-py36 tag.
# Runner_macos_standard_template# If you want to avoid committing each time you change those variables, you can also trigger a pipeline from the CI/CD->Pipelines webpage, providing the changed variable from the Run Pipeline UI
#
variables:

   RUNNER_MACOS_STANDARD: "ON"
   RUNNER_MACOS_PYTHON_36: "ON"
   RUNNER_MACOS_PYTHON_37: "ON"
   RUNNER_WINDOWS_STANDARD: "ON"
   RUNNER_WINDOWS_PYTHON_36: "ON"
   RUNNER_WINDOWS_PYTHON_37: "ON"
   RUNNER_LINUX16_STANDARD: "ON"
   RUNNER_LINUX16_PYTHON_35: "ON"
   RUNNER_LINUX18_STANDARD: "ON"
   RUNNER_LINUX18_PYTHON_36: "ON"

#
# Templates for specifiying the runner tags for different jobs and to avoid. Running a job when there is no active runner for that, by setting/unsetting the corresponding variable.
#
.runner_macos_standard_template: &runner_macos_standard
  only:
    variables:
      - $RUNNER_MACOS_STANDARD == "ON"
  tags:
    - macosx

.runner_macos_python_36_template: &runner_macos_python_36
  only:
    variables:
      - $RUNNER_MACOS_PYTHON_36 == "ON"
  tags:
    - macosx-py36

.runner_macos_python_37_template: &runner_macos_python_37
  only:
    variables:
      - $RUNNER_MACOS_PYTHON_37 == "ON"
  tags:
    - macosx-py37

.runner_windows_standard_template: &runner_windows_standard
  only:
    variables:
      - $RUNNER_WINDOWS_STANDARD == "ON"
  tags:
    - windows

.runner_windows_python_36_template: &runner_windows_python_36
  only:
    variables:
      - $RUNNER_WINDOWS_PYTHON_36 == "ON"
  tags:
    - windows-py36

.runner_windows_python_37_template: &runner_windows_python_37
  only:
    variables:
      - $RUNNER_WINDOWS_PYTHON_37 == "ON"
  tags:
    - windows-py37

.runner_linux16_standard_template: &runner_linux16_standard
  only:
    variables:
      - $RUNNER_LINUX16_STANDARD == "ON"
  tags:
    - linux16

.runner_linux16_python_35_template: &runner_linux16_python_35
  only:
    variables:
      - $RUNNER_LINUX16_PYTHON_35 == "ON"
  tags:
    - linux16-py35

.runner_linux18_standard_template: &runner_linux18_standard
  only:
    variables:
      - $RUNNER_LINUX18_STANDARD == "ON"
  tags:
    - linux18

.runner_linux18_python_36_template: &runner_linux18_python_36
  only:
    variables:
      - $RUNNER_LINUX18_PYTHON_36 == "ON"
  tags:
    - linux18-py36

# Specifies the CI branches once and for all jobs
.default_config:
  only:
    - master
    - develop
    - feature/experimental-ci

#
# Templates for CMake commands - Windows and Unix
#

# Config-and-generate stage template
.config_and_generate_windows_template:
  extends: .default_config
  script:
    - SET  CMAKE_OPTIONS_ALL=-DCMAKE_BUILD_TYPE=Release
                             -DBOOST_ROOT=%BOOST_ROOT%
                             %CMAKE_OPTIONS%
    - cmake -E remove_directory %BUILD_FOLDER%
    # folllowing line is for debug purposes only
    - echo "%GENERATOR%" \n\n %CMAKE_OPTIONS% \n\n %CMAKE_OPTIONS_ALL%
    - cmake -E make_directory %BUILD_FOLDER%
    - cmake -E chdir %BUILD_FOLDER%/
      cmake -G "%GENERATOR%" %CMAKE_OPTIONS_ALL% ..
  artifacts:
    paths:
      - "%BUILD_FOLDER%/"

.config_and_generate_unix_template:
  extends: .default_config
  script:
    - CMAKE_OPTIONS_ALL="-DCMAKE_BUILD_TYPE=Release
                         -DBUILD_AUDIOINTERFACES_JACK=ON
                         $CMAKE_OPTIONS"
    - cmake -E remove_directory $BUILD_FOLDER
    # folllowing line is for debug purposes only
    - echo "variables\n\n "$PYTHONHOME" \n\n $PYTHONHOME_PY36 \n\n $PYTHONHOME_PY37"
    - echo "variables\n\n "$GENERATOR" \n\n $CMAKE_OPTIONS \n\n $CMAKE_OPTIONS_ALL"
    - cmake -E make_directory $BUILD_FOLDER
    - cmake -E chdir $BUILD_FOLDER/
      cmake -G "$GENERATOR" $CMAKE_OPTIONS_ALL ..
  artifacts:
    paths:
      - $BUILD_FOLDER/

#
# Build stage template - Windows and Unix
#
.build_windows_template:
  #usage of hidden job for defining a common default job configuration
  extends: .default_config
  script:
    - cmake --build %BUILD_FOLDER%/ --target --config Release
  artifacts:
    paths:
      - "%BUILD_FOLDER%/"

.build_unix_template:
  #usage of hidden job for defining a common default job configuration
  extends: .default_config
  script:
    - cmake --build $BUILD_FOLDER/ --target --config Release
  artifacts:
    paths:
      - $BUILD_FOLDER/


#
# Test stage template
#

.test_linux_template:
  extends: .default_config
  script:
    - cmake --build $BUILD_FOLDER/ --target test --config Release
  artifacts:
    paths:
      - $BUILD_FOLDER/
    expire_in: 1 week
  # cache:
  #   paths:
  #     - "%BUILD_FOLDER%/"

.test_windows_template:
  #usage of hidden job for defining a common default job configuration
  extends: .default_config
  script:
    - echo "%PYTHONHOME%" \n\n
    - cmake --build %BUILD_FOLDER%/ --target RUN_TESTS --config Release
  #-- /verbosity:quiet
  artifacts:
    paths:
      - "%BUILD_FOLDER%/"
    expire_in: 1 week
  # cache:
  #   paths:
  #     - "%BUILD_FOLDER%/"

.test_macos_template:
  extends: .default_config
  script:
    - echo "variables\n\n "$PYTHONHOME" \n\n $PYTHONHOME_PY36 \n\n $PYTHONHOME_PY37"
    - cmake --build $BUILD_FOLDER/ --target RUN_TESTS --config Release
  artifacts:
    paths:
      - $BUILD_FOLDER/
    expire_in: 1 week
  # cache:
  #   paths:
  #     - "%BUILD_FOLDER%/"

#
# Package stage template
#

.package_windows_template:
  extends: .default_config
  script:
    - cmake --build %BUILD_FOLDER%/ --target package --config Release
  artifacts:
    paths:
      - "%BUILD_FOLDER%/"

.package_unix_template:
  extends: .default_config
  script:
    - cmake --build $BUILD_FOLDER/ --target package --config Release
    # - installer -dumplog -pkg VISR-Production-Suite*.pkg -target /
  artifacts:
    paths:
      - $BUILD_FOLDER/

## End of templates.


#
# Config stage jobs
#

# Linux
config-linux16-standard:
  stage: config_and_generate
  #usage of hidden job as a template for this stage, implicitly providing job-specific variables
  extends: .config_and_generate_unix_template
  variables:
    BUILD_FOLDER: build_standard
    GENERATOR: "Unix Makefiles"
  <<: *runner_linux16_standard

config-linux16-full-py35:
  extends: config-linux16-standard
  variables:
    BUILD_FOLDER: build_full_py35
    CMAKE_OPTIONS: "-DBUILD_PYTHON_BINDINGS=ON
                    -DPYTHON_INCLUDE_DIR=$PYTHON_INCLUDE_DIR_PY35
                    -DPYTHON_LIBRARY=$PYTHON_LIBRARY_PY35"
  <<: *runner_linux16_python_35

config-linux18-standard:
  stage: config_and_generate
  #usage of hidden job as a template for this stage, implicitly providing job-specific variables
  extends: .config_and_generate_unix_template
  variables:
    BUILD_FOLDER: build_standard
    GENERATOR: "Unix Makefiles"
  <<: *runner_linux18_standard

config-linux18-full-py36:
  extends: config-linux18-standard
  variables:
    BUILD_FOLDER: build_full_py36
    CMAKE_OPTIONS: "-DBUILD_PYTHON_BINDINGS=ON
                    -DPYTHON_INCLUDE_DIR=$PYTHON_INCLUDE_DIR_PY36
                    -DPYTHON_LIBRARY=$PYTHON_LIBRARY_PY36"
  <<: *runner_linux18_python_36

# Windows
config-windows-standard:
  stage: config_and_generate
  #usage of hidden job as a template for this stage, implicitly providing job-specific variables
  extends: .config_and_generate_windows_template
  variables:
    BUILD_FOLDER: build_standard
    GENERATOR: "Visual Studio 15 2017 Win64"
  <<: *runner_windows_standard

config-windows-full-py36:
  extends: config-windows-standard
  before_script: #here I'm using the before_script instead of variables because using CI "variables" I cannot have nested variables resolution
     - SET  CMAKE_OPTIONS=-DBUILD_PYTHON_BINDINGS=ON
                          -DPYTHON_INCLUDE_DIR=%PYTHON_INCLUDE_DIR_PY36%
                          -DPYTHON_LIBRARY=%PYTHON_LIBRARY_PY36%
  variables:
    BUILD_FOLDER: build_full_py36
  <<: *runner_windows_python_36

config-windows-full-py37:
  extends: config-windows-standard
  before_script:
     - SET  CMAKE_OPTIONS=-DBUILD_PYTHON_BINDINGS=ON
                          -DPYTHON_INCLUDE_DIR=%PYTHON_INCLUDE_DIR_PY37%
                          -DPYTHON_LIBRARY=%PYTHON_LIBRARY_PY37%
  variables:
    BUILD_FOLDER: build_full_py37
  <<: *runner_windows_python_37

# MacOs
config-macosx-standard:
  stage: config_and_generate
  #usage of hidden job as a template for this stage, implicitly providing job-specific variables
  extends: .config_and_generate_unix_template
  variables:
    BUILD_FOLDER: build_standard
    GENERATOR: "Xcode"
  <<: *runner_macos_standard

config-macosx-full-py36:
  extends: config-macosx-standard
  variables:
    BUILD_FOLDER: build_full_py36
    CMAKE_OPTIONS: "-DBUILD_PYTHON_BINDINGS=ON
                    -DPYTHON_INCLUDE_DIR=$PYTHON_INCLUDE_DIR_PY36
                    -DPYTHON_LIBRARY=$PYTHON_LIBRARY_PY36"
  <<: *runner_macos_python_36

config-macosx-full-py37:
  extends: config-macosx-standard
  variables:
    BUILD_FOLDER: build_full_py37
    CMAKE_OPTIONS: "-DBUILD_PYTHON_BINDINGS=ON
                    -DPYTHON_INCLUDE_DIR=$PYTHON_INCLUDE_DIR_PY37
                    -DPYTHON_LIBRARY=$PYTHON_LIBRARY_PY37"
  <<: *runner_macos_python_37

#
# Build stage jobs
#

# Linux
build-linux16-standard:
  stage: build
  extends: .build_unix_template
  dependencies:
    - config-linux16-standard
  variables:
    BUILD_FOLDER: build_standard
  <<: *runner_linux16_standard

build-linux16-full-py35:
  extends: build-linux16-standard
  dependencies:
    - config-linux16-full-py35
  variables:
    BUILD_FOLDER: build_full_py35
  <<: *runner_linux16_python_35

build-linux18-standard:
  stage: build
  extends: .build_unix_template
  dependencies:
    - config-linux18-standard
  variables:
    BUILD_FOLDER: build_standard
  <<: *runner_linux18_standard

build-linux18-full-py36:
  extends: build-linux18-standard
  dependencies:
    - config-linux18-full-py36
  variables:
    BUILD_FOLDER: build_full_py36
  <<: *runner_linux18_python_36

# Windows
build-windows-standard:
  stage: build
  extends: .build_windows_template
  dependencies:
    - config-windows-standard
  variables:
    BUILD_FOLDER: build_standard
  <<: *runner_windows_standard

build-windows-full-py36:
  extends: build-windows-standard
  dependencies:
    - config-windows-full-py36
  variables:
    BUILD_FOLDER: build_full_py36
  <<: *runner_windows_python_36

build-windows-full-py37:
  extends: build-windows-standard
  dependencies:
    - config-windows-full-py37
  variables:
    BUILD_FOLDER: build_full_py37
  <<: *runner_windows_python_37

# MacOs
build-macosx-standard:
  stage: build
  extends: .build_unix_template
  dependencies:
    - config-macosx-standard
  variables:
    BUILD_FOLDER: build_standard
  <<: *runner_macos_standard

build-macosx-full-py36:
  extends: build-macosx-standard
  dependencies:
    - config-macosx-full-py36
  variables:
    BUILD_FOLDER: build_full_py36
  <<: *runner_macos_python_36

build-macosx-full-py37:
  extends: build-macosx-standard
  dependencies:
    - config-macosx-full-py37
  variables:
    BUILD_FOLDER: build_full_py37
  <<: *runner_macos_python_37

#
# Test stage jobs
#

# Linux
test-linux16-standard:
  stage: test
  extends: .test_linux_template
  dependencies:
    - build-linux16-standard
  variables:
    BUILD_FOLDER: build_standard
  <<: *runner_linux16_standard
  allow_failure: true

test-linux16-full-py35:
  extends: test-linux16-standard
  dependencies:
    - build-linux16-full-py35
  variables:
    BUILD_FOLDER: build_full_py35
  <<: *runner_linux16_python_35

test-linux18-standard:
  stage: test
  extends: .test_linux_template
  dependencies:
    - build-linux18-standard
  variables:
    BUILD_FOLDER: build_standard
  <<: *runner_linux18_standard
  allow_failure: true

test-linux18-full-py36:
  extends: test-linux18-standard
  dependencies:
    - build-linux18-full-py36
  variables:
    BUILD_FOLDER: build_full_py36
  <<: *runner_linux18_python_36

# Windows
test-windows-standard:
  stage: test
  extends: .test_windows_template
  dependencies:
    - build-windows-standard
  variables:
    BUILD_FOLDER: build_standard
  <<: *runner_windows_standard
  allow_failure: true

# disabled for the moment. ATM some VISR-related PATH variables would need to be changed to make it work.
# test-windows-full-py36:
#   extends: test-windows-standard
#   before_script: #here I'm using the before_script instead of variables because using CI "variables" I cannot have nested variables resolution
#      - SET PYTHONHOME=%PYTHONHOME_PY36%
#   dependencies:
#     - build-windows-full-py36
#   variables:
#     BUILD_FOLDER: build_full_py36
#   <<: *runner_windows_python_36

test-windows-full-py37:
  extends: test-windows-standard
  before_script: #here I'm using the before_script instead of variables because using CI "variables" I cannot have nested variables resolution
     - SET PYTHONHOME=%PYTHONHOME_PY37%
  dependencies:
    - build-windows-full-py37
  variables:
    BUILD_FOLDER: build_full_py37
  <<: *runner_windows_python_37


# MacOs
test-macosx-standard:
  stage: test
  extends: .test_macos_template
  dependencies:
    - build-macosx-standard
  variables:
    BUILD_FOLDER: build_standard
  <<: *runner_macos_standard
  allow_failure: true

test-macosx-full-py36:
  extends: test-macosx-standard
  before_script: 
     - export  PYTHONHOME=$PYTHONHOME_PY36
  dependencies:
    - build-macosx-full-py36
  variables:
    BUILD_FOLDER: build_full_py36
  <<: *runner_macos_python_36

test-macosx-full-py37:
  extends: test-macosx-standard
  before_script: 
     - export  PYTHONHOME=$PYTHONHOME_PY37
  dependencies:
    - build-macosx-full-py37
  variables:
    BUILD_FOLDER: build_full_py37
  <<: *runner_macos_python_37

#
# Package stage jobs
#

# Linux
package-linux16-standard:
  stage: package
  extends: .package_unix_template
  dependencies:
    - build-linux16-standard
  variables:
    BUILD_FOLDER: build_standard
  <<: *runner_linux16_standard

package-linux16-full-py35:
  extends: package-linux16-standard
  dependencies:
    - build-linux16-full-py35
  variables:
    BUILD_FOLDER: build_full_py35
  <<: *runner_linux16_python_35

package-linux18-standard:
  stage: package
  extends: .package_unix_template
  dependencies:
    - build-linux18-standard
  variables:
    BUILD_FOLDER: build_standard
  <<: *runner_linux18_standard

package-linux18-full-py36:
  extends: package-linux18-standard
  dependencies:
    - build-linux18-full-py36
  variables:
    BUILD_FOLDER: build_full_py36
  <<: *runner_linux18_python_36

# Windows
package-windows-standard:
  stage: package
  #usage of hidden job for defining a common default job configuration
  extends: .package_windows_template
  dependencies:
    - build-windows-standard
  variables:
    BUILD_FOLDER: build_standard
  <<: *runner_windows_standard

package-windows-full-py36:
  extends: package-windows-standard
  dependencies:
    - build-windows-full-py36
  variables:
    BUILD_FOLDER: build_full_py36
  <<: *runner_windows_python_36

package-windows-full-py37:
  extends: package-windows-standard
  dependencies:
    - build-windows-full-py37
  variables:
    BUILD_FOLDER: build_full_py37
  <<: *runner_windows_python_37

# MacOs
package-macosx-standard:
  stage: package
  #usage of hidden job for defining a common default job configuration
  extends: .package_unix_template
  dependencies:
    - build-macosx-standard
  variables:
    BUILD_FOLDER: build_standard
  <<: *runner_macos_standard

package-macosx-full-py36:
  extends: package-macosx-standard
  dependencies:
    - build-macosx-full-py36
  variables:
    BUILD_FOLDER: build_full_py36
  <<: *runner_macos_python_36

package-macosx-full-py37:
  extends: package-macosx-standard
  dependencies:
    - build-macosx-full-py37
  variables:
    BUILD_FOLDER: build_full_py37
  <<: *runner_macos_python_37




# cache:
#   # key: "$CI_PROJECT_NAME/$CI_BUILD_REF_NAME"
#   paths:
#     - build/
# variables:
#   CI_DEBUG_TRACE: "true

# variables:
#   - linux: [linux, linux-ubuntu-18]


# # For internal, private deployment
# .linux-arch-deploy-int-master:
#   stage: deploy
#   script:
#     # Windows
#     - cd /vol/vssp/dataweb/data/s3a/public/VISR/visr_installers
#     - curl -XGET -L --header "PRIVATE-TOKEN:pGxrNG6gYyfiU7F4SkVz" "http://gitlab.eps.surrey.ac.uk/s3a/VISR/-/jobs/artifacts/master/download?job=windows-arch-package-py36" > windows/windows-arch-package-py36.zip && unzip -o windows/windows-arch-package-py36.zip -d windows/
#     - curl -XGET -L --header "PRIVATE-TOKEN:pGxrNG6gYyfiU7F4SkVz" "http://gitlab.eps.surrey.ac.uk/s3a/VISR/-/jobs/artifacts/master/download?job=windows-arch-package-py37" > windows/windows-arch-package-py37.zip && unzip -o windows/windows-arch-package-py37.zip -d windows/
#
#    # Macosx
#     - curl -XGET -L --header "PRIVATE-TOKEN:pGxrNG6gYyfiU7F4SkVz" "http://gitlab.eps.surrey.ac.uk/s3a/VISR/-/jobs/artifacts/master/download?job=macosx-arch-package-py36" > macosx/macosx-arch-package-py36.zip && unzip -o macosx/macosx-arch-package-py36.zip -d macosx/
#     - curl -XGET -L --header "PRIVATE-TOKEN:pGxrNG6gYyfiU7F4SkVz" "http://gitlab.eps.surrey.ac.uk/s3a/VISR/-/jobs/artifacts/master/download?job=macosx-arch-package-py37" > macosx/macosx-arch-package-py37.zip && unzip -o macosx/macosx-arch-package-py37.zip -d macosx/
#
#    # Linux
#     - curl -XGET -L --header "PRIVATE-TOKEN:pGxrNG6gYyfiU7F4SkVz" "http://gitlab.eps.surrey.ac.uk/s3a/VISR/-/jobs/artifacts/master/download?job=linux-arch-package-16" > linux/linux-arch-package-16.zip && unzip -o linux/linux-arch-package-16.zip -d linux/
#     # - curl -XGET -L --header "PRIVATE-TOKEN:pGxrNG6gYyfiU7F4SkVz" "http://gitlab.eps.surrey.ac.uk/s3a/VISR/-/jobs/artifacts/master/download?job=linux-arch-package-18" > linux/linux-arch-package-18.zip && unzip -o linux/linux-arch-package-18.zip -d linux/
#   only:
#     - master
#   tags:
#     - linux
#   allow_failure: true
#
# # For internal, private deployment
# .linux-arch-deploy-int-experimental:
#   stage: deploy
#   script:
#     # Windows
#     - cd /vol/vssp/dataweb/data/s3a/public/VISR/visr_installers
#     - curl -XGET -L --header "PRIVATE-TOKEN:pGxrNG6gYyfiU7F4SkVz" "http://gitlab.eps.surrey.ac.uk/s3a/VISR/-/jobs/artifacts/feature/experimental-ci/download?job=windows-arch-package-py36" > windows/windows-arch-package-py36.zip && unzip -o windows/windows-arch-package-py36.zip -d windows/
#     - curl -XGET -L --header "PRIVATE-TOKEN:pGxrNG6gYyfiU7F4SkVz" "http://gitlab.eps.surrey.ac.uk/s3a/VISR/-/jobs/artifacts/feature/experimental-ci/download?job=windows-arch-package-py37" > windows/windows-arch-package-py37.zip && unzip -o windows/windows-arch-package-py37.zip -d windows/
#
#    # Macosx
#     - curl -XGET -L --header "PRIVATE-TOKEN:pGxrNG6gYyfiU7F4SkVz" "http://gitlab.eps.surrey.ac.uk/s3a/VISR/-/jobs/artifacts/feature/experimental-ci/download?job=macosx-arch-package-py36" > macosx/macosx-arch-package-py36.zip && unzip -o macosx/macosx-arch-package-py36.zip -d macosx/
#     - curl -XGET -L --header "PRIVATE-TOKEN:pGxrNG6gYyfiU7F4SkVz" "http://gitlab.eps.surrey.ac.uk/s3a/VISR/-/jobs/artifacts/feature/experimental-ci/download?job=macosx-arch-package-py37" > macosx/macosx-arch-package-py37.zip && unzip -o macosx/macosx-arch-package-py37.zip -d macosx/
#
#    # Linux
#     - curl -XGET -L --header "PRIVATE-TOKEN:pGxrNG6gYyfiU7F4SkVz" "http://gitlab.eps.surrey.ac.uk/s3a/VISR/-/jobs/artifacts/feature/experimental-ci/download?job=linux-arch-package-16" > linux/linux-arch-package-16.zip && unzip -o linux/linux-arch-package-16.zip -d linux/
#     # - curl -XGET -L --header "PRIVATE-TOKEN:pGxrNG6gYyfiU7F4SkVz" "http://gitlab.eps.surrey.ac.uk/s3a/VISR/-/jobs/artifacts/feature/experimental-ci/download?job=linux-arch-package-18" > linux/linux-arch-package-18.zip && unzip -o linux/linux-arch-package-18.zip -d linux/
#   only:
#     - feature/experimental-ci
#   tags:
#     - linux
#   allow_failure: true
